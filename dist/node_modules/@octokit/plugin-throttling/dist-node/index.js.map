{"version":3,"file":"index.js","sources":["../dist-src/version.js","../dist-src/wrap-request.js","../dist-src/generated/triggers-notification-paths.js","../dist-src/route-matcher.js","../dist-src/index.js"],"sourcesContent":["export const VERSION = \"5.2.3\";\n","const noop = () => Promise.resolve();\n// @ts-expect-error\nexport function wrapRequest(state, request, options) {\n    return state.retryLimiter.schedule(doRequest, state, request, options);\n}\n// @ts-expect-error\nasync function doRequest(state, request, options) {\n    const isWrite = options.method !== \"GET\" && options.method !== \"HEAD\";\n    const { pathname } = new URL(options.url, \"http://github.test\");\n    const isSearch = options.method === \"GET\" && pathname.startsWith(\"/search/\");\n    const isGraphQL = pathname.startsWith(\"/graphql\");\n    const retryCount = ~~request.retryCount;\n    const jobOptions = retryCount > 0 ? { priority: 0, weight: 0 } : {};\n    if (state.clustering) {\n        // Remove a job from Redis if it has not completed or failed within 60s\n        // Examples: Node process terminated, client disconnected, etc.\n        // @ts-expect-error\n        jobOptions.expiration = 1000 * 60;\n    }\n    // Guarantee at least 1000ms between writes\n    // GraphQL can also trigger writes\n    if (isWrite || isGraphQL) {\n        await state.write.key(state.id).schedule(jobOptions, noop);\n    }\n    // Guarantee at least 3000ms between requests that trigger notifications\n    if (isWrite && state.triggersNotification(pathname)) {\n        await state.notifications.key(state.id).schedule(jobOptions, noop);\n    }\n    // Guarantee at least 2000ms between search requests\n    if (isSearch) {\n        await state.search.key(state.id).schedule(jobOptions, noop);\n    }\n    const req = state.global.key(state.id).schedule(jobOptions, request, options);\n    if (isGraphQL) {\n        const res = await req;\n        if (res.data.errors != null &&\n            // @ts-expect-error\n            res.data.errors.some((error) => error.type === \"RATE_LIMITED\")) {\n            const error = Object.assign(new Error(\"GraphQL Rate Limit Exceeded\"), {\n                response: res,\n                data: res.data,\n            });\n            throw error;\n        }\n    }\n    return req;\n}\n","export default [\n    \"/orgs/{org}/invitations\",\n    \"/orgs/{org}/invitations/{invitation_id}\",\n    \"/orgs/{org}/teams/{team_slug}/discussions\",\n    \"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\",\n    \"/repos/{owner}/{repo}/collaborators/{username}\",\n    \"/repos/{owner}/{repo}/commits/{commit_sha}/comments\",\n    \"/repos/{owner}/{repo}/issues\",\n    \"/repos/{owner}/{repo}/issues/{issue_number}/comments\",\n    \"/repos/{owner}/{repo}/pulls\",\n    \"/repos/{owner}/{repo}/pulls/{pull_number}/comments\",\n    \"/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies\",\n    \"/repos/{owner}/{repo}/pulls/{pull_number}/merge\",\n    \"/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\",\n    \"/repos/{owner}/{repo}/pulls/{pull_number}/reviews\",\n    \"/repos/{owner}/{repo}/releases\",\n    \"/teams/{team_id}/discussions\",\n    \"/teams/{team_id}/discussions/{discussion_number}/comments\",\n];\n","export function routeMatcher(paths) {\n    // EXAMPLE. For the following paths:\n    /* [\n        \"/orgs/{org}/invitations\",\n        \"/repos/{owner}/{repo}/collaborators/{username}\"\n    ] */\n    const regexes = paths.map((path) => path\n        .split(\"/\")\n        .map((c) => (c.startsWith(\"{\") ? \"(?:.+?)\" : c))\n        .join(\"/\"));\n    // 'regexes' would contain:\n    /* [\n        '/orgs/(?:.+?)/invitations',\n        '/repos/(?:.+?)/(?:.+?)/collaborators/(?:.+?)'\n    ] */\n    const regex = `^(?:${regexes.map((r) => `(?:${r})`).join(\"|\")})[^/]*$`;\n    // 'regex' would contain:\n    /*\n      ^(?:(?:\\/orgs\\/(?:.+?)\\/invitations)|(?:\\/repos\\/(?:.+?)\\/(?:.+?)\\/collaborators\\/(?:.+?)))[^\\/]*$\n  \n      It may look scary, but paste it into https://www.debuggex.com/\n      and it will make a lot more sense!\n    */\n    return new RegExp(regex, \"i\");\n}\n","// @ts-expect-error\nimport BottleneckLight from \"bottleneck/light\";\nimport { VERSION } from \"./version\";\nimport { wrapRequest } from \"./wrap-request\";\nimport triggersNotificationPaths from \"./generated/triggers-notification-paths\";\nimport { routeMatcher } from \"./route-matcher\";\n// Workaround to allow tests to directly access the triggersNotification function.\nconst regex = routeMatcher(triggersNotificationPaths);\nconst triggersNotification = regex.test.bind(regex);\nconst groups = {};\n// @ts-expect-error\nconst createGroups = function (Bottleneck, common) {\n    groups.global = new Bottleneck.Group({\n        id: \"octokit-global\",\n        maxConcurrent: 10,\n        ...common,\n    });\n    groups.search = new Bottleneck.Group({\n        id: \"octokit-search\",\n        maxConcurrent: 1,\n        minTime: 2000,\n        ...common,\n    });\n    groups.write = new Bottleneck.Group({\n        id: \"octokit-write\",\n        maxConcurrent: 1,\n        minTime: 1000,\n        ...common,\n    });\n    groups.notifications = new Bottleneck.Group({\n        id: \"octokit-notifications\",\n        maxConcurrent: 1,\n        minTime: 3000,\n        ...common,\n    });\n};\nexport function throttling(octokit, octokitOptions) {\n    const { enabled = true, Bottleneck = BottleneckLight, id = \"no-id\", timeout = 1000 * 60 * 2, // Redis TTL: 2 minutes\n    connection, } = octokitOptions.throttle || {};\n    if (!enabled) {\n        return {};\n    }\n    const common = { connection, timeout };\n    if (groups.global == null) {\n        createGroups(Bottleneck, common);\n    }\n    if (octokitOptions.throttle &&\n        octokitOptions.throttle.minimalSecondaryRateRetryAfter) {\n        octokit.log.warn(\"[@octokit/plugin-throttling] `options.throttle.minimalSecondaryRateRetryAfter` is deprecated, please use `options.throttle.fallbackSecondaryRateRetryAfter` instead\");\n        octokitOptions.throttle.fallbackSecondaryRateRetryAfter =\n            octokitOptions.throttle.minimalSecondaryRateRetryAfter;\n        delete octokitOptions.throttle.minimalSecondaryRateRetryAfter;\n    }\n    if (octokitOptions.throttle && octokitOptions.throttle.onAbuseLimit) {\n        octokit.log.warn(\"[@octokit/plugin-throttling] `onAbuseLimit()` is deprecated and will be removed in a future release of `@octokit/plugin-throttling`, please use the `onSecondaryRateLimit` handler instead\");\n        // @ts-ignore types don't allow for both properties to be set\n        octokitOptions.throttle.onSecondaryRateLimit =\n            octokitOptions.throttle.onAbuseLimit;\n        // @ts-ignore\n        delete octokitOptions.throttle.onAbuseLimit;\n    }\n    const state = Object.assign({\n        clustering: connection != null,\n        triggersNotification,\n        fallbackSecondaryRateRetryAfter: 60,\n        retryAfterBaseValue: 1000,\n        retryLimiter: new Bottleneck(),\n        id,\n        ...groups,\n    }, octokitOptions.throttle);\n    if (typeof state.onSecondaryRateLimit !== \"function\" ||\n        typeof state.onRateLimit !== \"function\") {\n        throw new Error(`octokit/plugin-throttling error:\n        You must pass the onSecondaryRateLimit and onRateLimit error handlers.\n        See https://octokit.github.io/rest.js/#throttling\n\n        const octokit = new Octokit({\n          throttle: {\n            onSecondaryRateLimit: (retryAfter, options) => {/* ... */},\n            onRateLimit: (retryAfter, options) => {/* ... */}\n          }\n        })\n    `);\n    }\n    const events = {};\n    const emitter = new Bottleneck.Events(events);\n    // @ts-expect-error\n    events.on(\"secondary-limit\", state.onSecondaryRateLimit);\n    // @ts-expect-error\n    events.on(\"rate-limit\", state.onRateLimit);\n    // @ts-expect-error\n    events.on(\"error\", (e) => octokit.log.warn(\"Error in throttling-plugin limit handler\", e));\n    // @ts-expect-error\n    state.retryLimiter.on(\"failed\", async function (error, info) {\n        const [state, request, options] = info.args;\n        const { pathname } = new URL(options.url, \"http://github.test\");\n        const shouldRetryGraphQL = pathname.startsWith(\"/graphql\") && error.status !== 401;\n        if (!(shouldRetryGraphQL || error.status === 403)) {\n            return;\n        }\n        const retryCount = ~~request.retryCount;\n        request.retryCount = retryCount;\n        // backward compatibility\n        options.request.retryCount = retryCount;\n        const { wantRetry, retryAfter = 0 } = await (async function () {\n            if (/\\bsecondary rate\\b/i.test(error.message)) {\n                // The user has hit the secondary rate limit. (REST and GraphQL)\n                // https://docs.github.com/en/rest/overview/resources-in-the-rest-api#secondary-rate-limits\n                // The Retry-After header can sometimes be blank when hitting a secondary rate limit,\n                // but is always present after 2-3s, so make sure to set `retryAfter` to at least 5s by default.\n                const retryAfter = Number(error.response.headers[\"retry-after\"]) ||\n                    state.fallbackSecondaryRateRetryAfter;\n                const wantRetry = await emitter.trigger(\"secondary-limit\", retryAfter, options, octokit, retryCount);\n                return { wantRetry, retryAfter };\n            }\n            if (error.response.headers != null &&\n                error.response.headers[\"x-ratelimit-remaining\"] === \"0\") {\n                // The user has used all their allowed calls for the current time period (REST and GraphQL)\n                // https://docs.github.com/en/rest/reference/rate-limit (REST)\n                // https://docs.github.com/en/graphql/overview/resource-limitations#rate-limit (GraphQL)\n                const rateLimitReset = new Date(~~error.response.headers[\"x-ratelimit-reset\"] * 1000).getTime();\n                const retryAfter = Math.max(Math.ceil((rateLimitReset - Date.now()) / 1000), 0);\n                const wantRetry = await emitter.trigger(\"rate-limit\", retryAfter, options, octokit, retryCount);\n                return { wantRetry, retryAfter };\n            }\n            return {};\n        })();\n        if (wantRetry) {\n            request.retryCount++;\n            return retryAfter * state.retryAfterBaseValue;\n        }\n    });\n    octokit.hook.wrap(\"request\", wrapRequest.bind(null, state));\n    return {};\n}\nthrottling.VERSION = VERSION;\nthrottling.triggersNotification = triggersNotification;\n"],"names":["VERSION","noop","Promise","resolve","wrapRequest","state","request","options","retryLimiter","schedule","doRequest","isWrite","method","pathname","URL","url","isSearch","startsWith","isGraphQL","retryCount","jobOptions","priority","weight","clustering","expiration","write","key","id","triggersNotification","notifications","search","req","global","res","data","errors","some","error","type","Object","assign","Error","response","routeMatcher","paths","regexes","map","path","split","c","join","regex","r","RegExp","triggersNotificationPaths","test","bind","groups","createGroups","Bottleneck","common","Group","maxConcurrent","minTime","throttling","octokit","octokitOptions","enabled","BottleneckLight","timeout","connection","throttle","minimalSecondaryRateRetryAfter","log","warn","fallbackSecondaryRateRetryAfter","onAbuseLimit","onSecondaryRateLimit","retryAfterBaseValue","onRateLimit","events","emitter","Events","on","e","info","args","shouldRetryGraphQL","status","wantRetry","retryAfter","message","Number","headers","trigger","rateLimitReset","Date","getTime","Math","max","ceil","now","hook","wrap"],"mappings":";;;;;;;;AAAO,MAAMA,OAAO,GAAG,mBAAmB;;ACA1C,MAAMC,IAAI,GAAGA,MAAMC,OAAO,CAACC,OAAO,EAAE;AACpC;AACA,AAAO,SAASC,WAAWA,CAACC,KAAK,EAAEC,OAAO,EAAEC,OAAO,EAAE;EACjD,OAAOF,KAAK,CAACG,YAAY,CAACC,QAAQ,CAACC,SAAS,EAAEL,KAAK,EAAEC,OAAO,EAAEC,OAAO,CAAC;AAC1E;AACA;AACA,eAAeG,SAASA,CAACL,KAAK,EAAEC,OAAO,EAAEC,OAAO,EAAE;EAC9C,MAAMI,OAAO,GAAGJ,OAAO,CAACK,MAAM,KAAK,KAAK,IAAIL,OAAO,CAACK,MAAM,KAAK,MAAM;EACrE,MAAM;IAAEC;GAAU,GAAG,IAAIC,GAAG,CAACP,OAAO,CAACQ,GAAG,EAAE,oBAAoB,CAAC;EAC/D,MAAMC,QAAQ,GAAGT,OAAO,CAACK,MAAM,KAAK,KAAK,IAAIC,QAAQ,CAACI,UAAU,CAAC,UAAU,CAAC;EAC5E,MAAMC,SAAS,GAAGL,QAAQ,CAACI,UAAU,CAAC,UAAU,CAAC;EACjD,MAAME,UAAU,GAAG,CAAC,CAACb,OAAO,CAACa,UAAU;EACvC,MAAMC,UAAU,GAAGD,UAAU,GAAG,CAAC,GAAG;IAAEE,QAAQ,EAAE,CAAC;IAAEC,MAAM,EAAE;GAAG,GAAG,EAAE;EACnE,IAAIjB,KAAK,CAACkB,UAAU,EAAE;;;;IAIlBH,UAAU,CAACI,UAAU,GAAG,IAAI,GAAG,EAAE;;;;EAIrC,IAAIb,OAAO,IAAIO,SAAS,EAAE;IACtB,MAAMb,KAAK,CAACoB,KAAK,CAACC,GAAG,CAACrB,KAAK,CAACsB,EAAE,CAAC,CAAClB,QAAQ,CAACW,UAAU,EAAEnB,IAAI,CAAC;;;EAG9D,IAAIU,OAAO,IAAIN,KAAK,CAACuB,oBAAoB,CAACf,QAAQ,CAAC,EAAE;IACjD,MAAMR,KAAK,CAACwB,aAAa,CAACH,GAAG,CAACrB,KAAK,CAACsB,EAAE,CAAC,CAAClB,QAAQ,CAACW,UAAU,EAAEnB,IAAI,CAAC;;;EAGtE,IAAIe,QAAQ,EAAE;IACV,MAAMX,KAAK,CAACyB,MAAM,CAACJ,GAAG,CAACrB,KAAK,CAACsB,EAAE,CAAC,CAAClB,QAAQ,CAACW,UAAU,EAAEnB,IAAI,CAAC;;EAE/D,MAAM8B,GAAG,GAAG1B,KAAK,CAAC2B,MAAM,CAACN,GAAG,CAACrB,KAAK,CAACsB,EAAE,CAAC,CAAClB,QAAQ,CAACW,UAAU,EAAEd,OAAO,EAAEC,OAAO,CAAC;EAC7E,IAAIW,SAAS,EAAE;IACX,MAAMe,GAAG,GAAG,MAAMF,GAAG;IACrB,IAAIE,GAAG,CAACC,IAAI,CAACC,MAAM,IAAI,IAAI;;IAEvBF,GAAG,CAACC,IAAI,CAACC,MAAM,CAACC,IAAI,CAAEC,KAAK,IAAKA,KAAK,CAACC,IAAI,KAAK,cAAc,CAAC,EAAE;MAChE,MAAMD,KAAK,GAAGE,MAAM,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,6BAA6B,CAAC,EAAE;QAClEC,QAAQ,EAAET,GAAG;QACbC,IAAI,EAAED,GAAG,CAACC;OACb,CAAC;MACF,MAAMG,KAAK;;;EAGnB,OAAON,GAAG;AACd;;AC9CA,gCAAe,CACX,yBAAyB,EACzB,yCAAyC,EACzC,2CAA2C,EAC3C,wEAAwE,EACxE,gDAAgD,EAChD,qDAAqD,EACrD,8BAA8B,EAC9B,sDAAsD,EACtD,6BAA6B,EAC7B,oDAAoD,EACpD,yEAAyE,EACzE,iDAAiD,EACjD,+DAA+D,EAC/D,mDAAmD,EACnD,gCAAgC,EAChC,8BAA8B,EAC9B,2DAA2D,CAC9D;;AClBM,SAASY,YAAYA,CAACC,KAAK,EAAE;;;AAGpC;AACA;AACA;EACI,MAAMC,OAAO,GAAGD,KAAK,CAACE,GAAG,CAAEC,IAAI,IAAKA,IAAI,CACnCC,KAAK,CAAC,GAAG,CAAC,CACVF,GAAG,CAAEG,CAAC,IAAMA,CAAC,CAAChC,UAAU,CAAC,GAAG,CAAC,GAAG,SAAS,GAAGgC,CAAE,CAAC,CAC/CC,IAAI,CAAC,GAAG,CAAC,CAAC;;;AAGnB;AACA;AACA;EACI,MAAMC,KAAK,GAAI,OAAMN,OAAO,CAACC,GAAG,CAAEM,CAAC,IAAM,MAAKA,CAAE,GAAE,CAAC,CAACF,IAAI,CAAC,GAAG,CAAE,SAAQ;;;AAG1E;AACA;AACA;AACA;EAEI,OAAO,IAAIG,MAAM,CAACF,KAAK,EAAE,GAAG,CAAC;AACjC;;ACxBA;AACA,AAKA;AACA,MAAMA,KAAK,GAAGR,YAAY,CAACW,yBAAyB,CAAC;AACrD,MAAM1B,oBAAoB,GAAGuB,KAAK,CAACI,IAAI,CAACC,IAAI,CAACL,KAAK,CAAC;AACnD,MAAMM,MAAM,GAAG,EAAE;AACjB;AACA,MAAMC,YAAY,GAAG,UAAUC,UAAU,EAAEC,MAAM,EAAE;EAC/CH,MAAM,CAACzB,MAAM,GAAG,IAAI2B,UAAU,CAACE,KAAK,CAAC;IACjClC,EAAE,EAAE,gBAAgB;IACpBmC,aAAa,EAAE,EAAE;IACjB,GAAGF;GACN,CAAC;EACFH,MAAM,CAAC3B,MAAM,GAAG,IAAI6B,UAAU,CAACE,KAAK,CAAC;IACjClC,EAAE,EAAE,gBAAgB;IACpBmC,aAAa,EAAE,CAAC;IAChBC,OAAO,EAAE,IAAI;IACb,GAAGH;GACN,CAAC;EACFH,MAAM,CAAChC,KAAK,GAAG,IAAIkC,UAAU,CAACE,KAAK,CAAC;IAChClC,EAAE,EAAE,eAAe;IACnBmC,aAAa,EAAE,CAAC;IAChBC,OAAO,EAAE,IAAI;IACb,GAAGH;GACN,CAAC;EACFH,MAAM,CAAC5B,aAAa,GAAG,IAAI8B,UAAU,CAACE,KAAK,CAAC;IACxClC,EAAE,EAAE,uBAAuB;IAC3BmC,aAAa,EAAE,CAAC;IAChBC,OAAO,EAAE,IAAI;IACb,GAAGH;GACN,CAAC;AACN,CAAC;AACD,AAAO,SAASI,UAAUA,CAACC,OAAO,EAAEC,cAAc,EAAE;EAChD,MAAM;IAAEC,OAAO,GAAG,IAAI;IAAER,UAAU,GAAGS,eAAe;IAAEzC,EAAE,GAAG,OAAO;IAAE0C,OAAO,GAAG,IAAI,GAAG,EAAE,GAAG,CAAC;;IAC3FC;GAAa,GAAGJ,cAAc,CAACK,QAAQ,IAAI,EAAE;EAC7C,IAAI,CAACJ,OAAO,EAAE;IACV,OAAO,EAAE;;EAEb,MAAMP,MAAM,GAAG;IAAEU,UAAU;IAAED;GAAS;EACtC,IAAIZ,MAAM,CAACzB,MAAM,IAAI,IAAI,EAAE;IACvB0B,YAAY,CAACC,UAAU,EAAEC,MAAM,CAAC;;EAEpC,IAAIM,cAAc,CAACK,QAAQ,IACvBL,cAAc,CAACK,QAAQ,CAACC,8BAA8B,EAAE;IACxDP,OAAO,CAACQ,GAAG,CAACC,IAAI,CAAC,qKAAqK,CAAC;IACvLR,cAAc,CAACK,QAAQ,CAACI,+BAA+B,GACnDT,cAAc,CAACK,QAAQ,CAACC,8BAA8B;IAC1D,OAAON,cAAc,CAACK,QAAQ,CAACC,8BAA8B;;EAEjE,IAAIN,cAAc,CAACK,QAAQ,IAAIL,cAAc,CAACK,QAAQ,CAACK,YAAY,EAAE;IACjEX,OAAO,CAACQ,GAAG,CAACC,IAAI,CAAC,4LAA4L,CAAC;;IAE9MR,cAAc,CAACK,QAAQ,CAACM,oBAAoB,GACxCX,cAAc,CAACK,QAAQ,CAACK,YAAY;;IAExC,OAAOV,cAAc,CAACK,QAAQ,CAACK,YAAY;;EAE/C,MAAMvE,KAAK,GAAGkC,MAAM,CAACC,MAAM,CAAC;IACxBjB,UAAU,EAAE+C,UAAU,IAAI,IAAI;IAC9B1C,oBAAoB;IACpB+C,+BAA+B,EAAE,EAAE;IACnCG,mBAAmB,EAAE,IAAI;IACzBtE,YAAY,EAAE,IAAImD,UAAU,EAAE;IAC9BhC,EAAE;IACF,GAAG8B;GACN,EAAES,cAAc,CAACK,QAAQ,CAAC;EAC3B,IAAI,OAAOlE,KAAK,CAACwE,oBAAoB,KAAK,UAAU,IAChD,OAAOxE,KAAK,CAAC0E,WAAW,KAAK,UAAU,EAAE;IACzC,MAAM,IAAItC,KAAK,CAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC;;EAEF,MAAMuC,MAAM,GAAG,EAAE;EACjB,MAAMC,OAAO,GAAG,IAAItB,UAAU,CAACuB,MAAM,CAACF,MAAM,CAAC;;EAE7CA,MAAM,CAACG,EAAE,CAAC,iBAAiB,EAAE9E,KAAK,CAACwE,oBAAoB,CAAC;;EAExDG,MAAM,CAACG,EAAE,CAAC,YAAY,EAAE9E,KAAK,CAAC0E,WAAW,CAAC;;EAE1CC,MAAM,CAACG,EAAE,CAAC,OAAO,EAAGC,CAAC,IAAKnB,OAAO,CAACQ,GAAG,CAACC,IAAI,CAAC,0CAA0C,EAAEU,CAAC,CAAC,CAAC;;EAE1F/E,KAAK,CAACG,YAAY,CAAC2E,EAAE,CAAC,QAAQ,EAAE,gBAAgB9C,KAAK,EAAEgD,IAAI,EAAE;IACzD,MAAM,CAAChF,KAAK,EAAEC,OAAO,EAAEC,OAAO,CAAC,GAAG8E,IAAI,CAACC,IAAI;IAC3C,MAAM;MAAEzE;KAAU,GAAG,IAAIC,GAAG,CAACP,OAAO,CAACQ,GAAG,EAAE,oBAAoB,CAAC;IAC/D,MAAMwE,kBAAkB,GAAG1E,QAAQ,CAACI,UAAU,CAAC,UAAU,CAAC,IAAIoB,KAAK,CAACmD,MAAM,KAAK,GAAG;IAClF,IAAI,EAAED,kBAAkB,IAAIlD,KAAK,CAACmD,MAAM,KAAK,GAAG,CAAC,EAAE;MAC/C;;IAEJ,MAAMrE,UAAU,GAAG,CAAC,CAACb,OAAO,CAACa,UAAU;IACvCb,OAAO,CAACa,UAAU,GAAGA,UAAU;;IAE/BZ,OAAO,CAACD,OAAO,CAACa,UAAU,GAAGA,UAAU;IACvC,MAAM;MAAEsE,SAAS;MAAEC,UAAU,GAAG;KAAG,GAAG,MAAO,kBAAkB;MAC3D,IAAI,qBAAqB,CAACnC,IAAI,CAAClB,KAAK,CAACsD,OAAO,CAAC,EAAE;;;;;QAK3C,MAAMD,UAAU,GAAGE,MAAM,CAACvD,KAAK,CAACK,QAAQ,CAACmD,OAAO,CAAC,aAAa,CAAC,CAAC,IAC5DxF,KAAK,CAACsE,+BAA+B;QACzC,MAAMc,SAAS,GAAG,MAAMR,OAAO,CAACa,OAAO,CAAC,iBAAiB,EAAEJ,UAAU,EAAEnF,OAAO,EAAE0D,OAAO,EAAE9C,UAAU,CAAC;QACpG,OAAO;UAAEsE,SAAS;UAAEC;SAAY;;MAEpC,IAAIrD,KAAK,CAACK,QAAQ,CAACmD,OAAO,IAAI,IAAI,IAC9BxD,KAAK,CAACK,QAAQ,CAACmD,OAAO,CAAC,uBAAuB,CAAC,KAAK,GAAG,EAAE;;;;QAIzD,MAAME,cAAc,GAAG,IAAIC,IAAI,CAAC,CAAC,CAAC3D,KAAK,CAACK,QAAQ,CAACmD,OAAO,CAAC,mBAAmB,CAAC,GAAG,IAAI,CAAC,CAACI,OAAO,EAAE;QAC/F,MAAMP,UAAU,GAAGQ,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,IAAI,CAAC,CAACL,cAAc,GAAGC,IAAI,CAACK,GAAG,EAAE,IAAI,IAAI,CAAC,EAAE,CAAC,CAAC;QAC/E,MAAMZ,SAAS,GAAG,MAAMR,OAAO,CAACa,OAAO,CAAC,YAAY,EAAEJ,UAAU,EAAEnF,OAAO,EAAE0D,OAAO,EAAE9C,UAAU,CAAC;QAC/F,OAAO;UAAEsE,SAAS;UAAEC;SAAY;;MAEpC,OAAO,EAAE;KACZ,EAAG;IACJ,IAAID,SAAS,EAAE;MACXnF,OAAO,CAACa,UAAU,EAAE;MACpB,OAAOuE,UAAU,GAAGrF,KAAK,CAACyE,mBAAmB;;GAEpD,CAAC;EACFb,OAAO,CAACqC,IAAI,CAACC,IAAI,CAAC,SAAS,EAAEnG,WAAW,CAACoD,IAAI,CAAC,IAAI,EAAEnD,KAAK,CAAC,CAAC;EAC3D,OAAO,EAAE;AACb;AACA2D,UAAU,CAAChE,OAAO,GAAGA,OAAO;AAC5BgE,UAAU,CAACpC,oBAAoB,GAAGA,oBAAoB;;;;"}