{"version":3,"file":"index.js","sources":["../dist-src/get-oauth-access-token.js","../dist-src/auth.js","../dist-src/hook.js","../dist-src/version.js","../dist-src/index.js"],"sourcesContent":["import { createDeviceCode, exchangeDeviceCode } from \"@octokit/oauth-methods\";\nexport async function getOAuthAccessToken(state, options) {\n    const cachedAuthentication = getCachedAuthentication(state, options.auth);\n    if (cachedAuthentication)\n        return cachedAuthentication;\n    // Step 1: Request device and user codes\n    // https://docs.github.com/en/developers/apps/authorizing-oauth-apps#step-1-app-requests-the-device-and-user-verification-codes-from-github\n    const { data: verification } = await createDeviceCode({\n        clientType: state.clientType,\n        clientId: state.clientId,\n        request: options.request || state.request,\n        // @ts-expect-error the extra code to make TS happy is not worth it\n        scopes: options.auth.scopes || state.scopes,\n    });\n    // Step 2: User must enter the user code on https://github.com/login/device\n    // See https://docs.github.com/en/developers/apps/authorizing-oauth-apps#step-2-prompt-the-user-to-enter-the-user-code-in-a-browser\n    await state.onVerification(verification);\n    // Step 3: Exchange device code for access token\n    // See https://docs.github.com/en/developers/apps/authorizing-oauth-apps#step-3-app-polls-github-to-check-if-the-user-authorized-the-device\n    const authentication = await waitForAccessToken(options.request || state.request, state.clientId, state.clientType, verification);\n    state.authentication = authentication;\n    return authentication;\n}\nfunction getCachedAuthentication(state, auth) {\n    if (auth.refresh === true)\n        return false;\n    if (!state.authentication)\n        return false;\n    if (state.clientType === \"github-app\") {\n        return state.authentication;\n    }\n    const authentication = state.authentication;\n    const newScope = ((\"scopes\" in auth && auth.scopes) || state.scopes).join(\" \");\n    const currentScope = authentication.scopes.join(\" \");\n    return newScope === currentScope ? authentication : false;\n}\nasync function wait(seconds) {\n    await new Promise((resolve) => setTimeout(resolve, seconds * 1000));\n}\nasync function waitForAccessToken(request, clientId, clientType, verification) {\n    try {\n        const options = {\n            clientId,\n            request,\n            code: verification.device_code,\n        };\n        // WHY TYPESCRIPT WHY ARE YOU DOING THIS TO ME\n        const { authentication } = clientType === \"oauth-app\"\n            ? await exchangeDeviceCode({\n                ...options,\n                clientType: \"oauth-app\",\n            })\n            : await exchangeDeviceCode({\n                ...options,\n                clientType: \"github-app\",\n            });\n        return {\n            type: \"token\",\n            tokenType: \"oauth\",\n            ...authentication,\n        };\n    }\n    catch (error) {\n        // istanbul ignore if\n        // @ts-ignore\n        if (!error.response)\n            throw error;\n        // @ts-ignore\n        const errorType = error.response.data.error;\n        if (errorType === \"authorization_pending\") {\n            await wait(verification.interval);\n            return waitForAccessToken(request, clientId, clientType, verification);\n        }\n        if (errorType === \"slow_down\") {\n            await wait(verification.interval + 5);\n            return waitForAccessToken(request, clientId, clientType, verification);\n        }\n        throw error;\n    }\n}\n","import { getOAuthAccessToken } from \"./get-oauth-access-token\";\nexport async function auth(state, authOptions) {\n    return getOAuthAccessToken(state, {\n        auth: authOptions,\n    });\n}\n","import { getOAuthAccessToken } from \"./get-oauth-access-token\";\nexport async function hook(state, request, route, parameters) {\n    let endpoint = request.endpoint.merge(route, parameters);\n    // Do not intercept request to retrieve codes or token\n    if (/\\/login\\/(oauth\\/access_token|device\\/code)$/.test(endpoint.url)) {\n        return request(endpoint);\n    }\n    const { token } = await getOAuthAccessToken(state, {\n        request,\n        auth: { type: \"oauth\" },\n    });\n    endpoint.headers.authorization = `token ${token}`;\n    return request(endpoint);\n}\n","export const VERSION = \"4.0.4\";\n","import { getUserAgent } from \"universal-user-agent\";\nimport { request as octokitRequest } from \"@octokit/request\";\nimport { auth } from \"./auth\";\nimport { hook } from \"./hook\";\nimport { VERSION } from \"./version\";\nexport function createOAuthDeviceAuth(options) {\n    const requestWithDefaults = options.request ||\n        octokitRequest.defaults({\n            headers: {\n                \"user-agent\": `octokit-auth-oauth-device.js/${VERSION} ${getUserAgent()}`,\n            },\n        });\n    const { request = requestWithDefaults, ...otherOptions } = options;\n    const state = options.clientType === \"github-app\"\n        ? {\n            ...otherOptions,\n            clientType: \"github-app\",\n            request,\n        }\n        : {\n            ...otherOptions,\n            clientType: \"oauth-app\",\n            request,\n            scopes: options.scopes || [],\n        };\n    if (!options.clientId) {\n        throw new Error('[@octokit/auth-oauth-device] \"clientId\" option must be set (https://github.com/octokit/auth-oauth-device.js#usage)');\n    }\n    if (!options.onVerification) {\n        throw new Error('[@octokit/auth-oauth-device] \"onVerification\" option must be a function (https://github.com/octokit/auth-oauth-device.js#usage)');\n    }\n    // @ts-ignore too much for tsc / ts-jest ¯\\_(ツ)_/¯\n    return Object.assign(auth.bind(null, state), {\n        hook: hook.bind(null, state),\n    });\n}\n"],"names":["getOAuthAccessToken","state","options","cachedAuthentication","getCachedAuthentication","auth","data","verification","createDeviceCode","clientType","clientId","request","scopes","onVerification","authentication","waitForAccessToken","refresh","newScope","join","currentScope","wait","seconds","Promise","resolve","setTimeout","code","device_code","exchangeDeviceCode","type","tokenType","error","response","errorType","interval","authOptions","hook","route","parameters","endpoint","merge","test","url","token","headers","authorization","VERSION","createOAuthDeviceAuth","requestWithDefaults","octokitRequest","defaults","getUserAgent","otherOptions","Error","Object","assign","bind"],"mappings":"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"}